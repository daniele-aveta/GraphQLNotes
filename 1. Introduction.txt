----------------------------------------------------- 1. Introduction -----------------------------------------------------


- GraphQL = GraphQL is a query language for your API, and a server-side runtime for executing queries using a type system you define for your data. GraphQL isn't tied to any specific database or storage engine; it is backed by your existing code and data.


- Type System to Describe API = On the server side, a GraphQL service is created by defining types and their fields. Each field is then mapped to a Resolver Function, which defines how the required data is retrieved. For example:

    type Query {
        me: User
    }
    
    type User {
        name: String
    }

    Along with functions for each type's field:

    // Resolver for the `me` field on the `Query` type.
    // Returns the authenticated user who made the request.
    //
    function resolveQueryMe(_parent, _args, context, _info) {
        return context.request.auth.user;
    }
    
    // Resolver for the `name` field on the `User` type.
    // the name field is populated by using the user's ID to fetch the full name from a database.
    //
    function resolveUserName(user, _args, context, _info) {
        return context.db.getUserFullName(user.id);
    }


- Query Data = After a GraphQL service is running (typically at a URL on a web service), it can receive GraphQL queries from clients. The service first checks a query to ensure it only refers to the types and fields defined for the API, and then runs the provided Resolver Functions to produce a result. The client can make queries to the API asking only for the fields they need, and then receive just that data in the expected shape with a single request.


- References:

    - Introduction to GraphQL - https://graphql.org/learn/